<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--开启controller扫描-->
    <context:component-scan base-package="com.wen.controller"/>
    <!--配置springMvc视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--注册自定义转换器-->
    <bean id="conversionServiceBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.wen.converter.DateConverter"/>
            </set>
        </property>
    </bean>
    <!--注册springMVC拦截器-->
    <mvc:interceptors>
        <!--拦截所有handler-->
        <!--<bean class="com.wen.interceptor.MyInterceptor01"/>-->
        <!--拦截特定handlerURL-->
        <mvc:interceptor>
            <!--配置当前拦截器的url拦截规则 **代表当前目录及其子目录->-->
            <mvc:mapping path="/**"/>
            <!--可以在mapping的基础上排除一些url-->
            <!--<mvc:exclude-mapping path="/demo/**"/>-->
            <bean class="com.wen.interceptor.MyInterceptor01"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.wen.interceptor.MyInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--处理器映射器、处理器适配器-->
    <!--注册最合适的处理器映射器、最合适的处理器适配器-->
    <mvc:annotation-driven conversion-service="conversionServiceBean"/>
    <!--配置静态资源文件：方案一-->
    <!--
        原理：添加该标签配置之后，会在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler对象
        这个对象如同一个检查人员，对进入DispatcherServlet的url请求进行过滤筛查，如果发现是一个静态资源请求，
        那么会把请求转由Web应用服务器（tomcat）默认的DefaultServlet来处理了；如果不是静态资源请求，继续由SpringMvc处理
    -->
    <!--<mvc:default-servlet-handler/>-->
    <!--配置静态资源文件：方案二    springMVC 自己处理静态资源文件-->
    <!--
        mapping:约定的静态资源的url规则
        location:指定的静态资源路径
    -->
    <mvc:resources mapping="/resources/**" location="/WEB-INF/static/html/"/>
    <!--配置springMVC文件上传解析器 id 为固定的multipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件上传大小上限，单位是字节，-1代表没有限制也是默认值-->
        <property name="maxUploadSize" value="5000000"/>
    </bean>
</beans>